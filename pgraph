#!/usr/bin/env python

import sys
import os
import os.path
import argparse

import matplotlib.pyplot as plt
import matplotlib.ticker as tkr
import numpy as np
import csv 
import datetime
import dateutil.parser
import dateutil.tz
import shutil
import urllib2
import time

#                           _    
#  _ __  __ _ _ _ __ _ _ __| |_  
# | '_ \/ _` | '_/ _` | '_ \ ' \ 
# | .__/\__, |_| \__,_| .__/_||_|
# |_|   |___/         |_|        
#
# A program which fetches barometric pressure data from my data.sparkfun.com page, and then
# formats it in a fairly nice way using matplotlib.  It also will serve as a not-so-bad 
# example of how to use matplotlib.
#
# Written by Mark VandeWettering

def savitzky_golay(y, window_size, order, deriv=0, rate=1):
    r"""Smooth (and optionally differentiate) data with a Savitzky-Golay filter.
    The Savitzky-Golay filter removes high frequency noise from data.
    It has the advantage of preserving the original shape and
    features of the signal better than other types of filtering
    approaches, such as moving averages techniques.
    Parameters
    ----------
    y : array_like, shape (N,)
        the values of the time history of the signal.
    window_size : int
        the length of the window. Must be an odd integer number.
    order : int
        the order of the polynomial used in the filtering.
        Must be less then `window_size` - 1.
    deriv: int
        the order of the derivative to compute (default = 0 means only smoothing)
    Returns
    -------
    ys : ndarray, shape (N)
        the smoothed signal (or it's n-th derivative).
    Notes
    -----
    The Savitzky-Golay is a type of low-pass filter, particularly
    suited for smoothing noisy data. The main idea behind this
    approach is to make for each point a least-square fit with a
    polynomial of high order over a odd-sized window centered at
    the point.
    Examples
    --------
    t = np.linspace(-4, 4, 500)
    y = np.exp( -t**2 ) + np.random.normal(0, 0.05, t.shape)
    ysg = savitzky_golay(y, window_size=31, order=4)
    import matplotlib.pyplot as plt
    plt.plot(t, y, label='Noisy signal')
    plt.plot(t, np.exp(-t**2), 'k', lw=1.5, label='Original signal')
    plt.plot(t, ysg, 'r', label='Filtered signal')
    plt.legend()
    plt.show()
    References
    ----------
    .. [1] A. Savitzky, M. J. E. Golay, Smoothing and Differentiation of
       Data by Simplified Least Squares Procedures. Analytical
       Chemistry, 1964, 36 (8), pp 1627-1639.
    .. [2] Numerical Recipes 3rd Edition: The Art of Scientific Computing
       W.H. Press, S.A. Teukolsky, W.T. Vetterling, B.P. Flannery
       Cambridge University Press ISBN-13: 9780521880688
    """
    import numpy as np
    from math import factorial
    
    try:
        window_size = np.abs(np.int(window_size))
        order = np.abs(np.int(order))
    except ValueError, msg:
        raise ValueError("window_size and order have to be of type int")
    if window_size % 2 != 1 or window_size < 1:
        raise TypeError("window_size size must be a positive odd number")
    if window_size < order + 2:
        raise TypeError("window_size is too small for the polynomials order")
    order_range = range(order+1)
    half_window = (window_size -1) // 2
    # precompute coefficients
    b = np.mat([[k**i for i in order_range] for k in range(-half_window, half_window+1)])
    m = np.linalg.pinv(b).A[deriv] * rate**deriv * factorial(deriv)
    # pad the signal at the extremes with
    # values taken from the signal itself
    firstvals = y[0] - np.abs( y[1:half_window+1][::-1] - y[0] )
    lastvals = y[-1] + np.abs(y[-half_window-1:-1][::-1] - y[-1])
    y = np.concatenate((firstvals, y, lastvals))
    return np.convolve( m[::-1], y, mode='valid')

URL = "https://data.sparkfun.com/output/JxYVWG70lZflxKMjoYqn.csv"
data = "pressure.csv"
output = "pressure.png"

parser = argparse.ArgumentParser()
parser.add_argument("--fetch", help="force fetching new data from the network",
                               action="store_true")
parser.add_argument("--url", help="url to fetch from (default %s)" % URL, default=URL)
parser.add_argument("--data", help="file to read/store data (default %s)" % data, default=data)
parser.add_argument("-o", "--output", help="save graph to file", default=None)
parser.add_argument("-a", "--all", help="graph all data, default is last 48 hours", action="store_true")
args = parser.parse_args()

# could use a bit more error checking

if args.fetch or not os.path.isfile(args.data):
    print >> sys.stderr, "FETCHING %s" % args.url
    response = urllib2.urlopen(args.url)
    print >> sys.stderr, "SAVING TO %s" % args.data
    shutil.copyfileobj(response, open(args.data, "w"))
    

# Fetch the data as we've saved it on disk...
response = open(args.data)

# read the CSV file, skipping the headers 
rdr = csv.reader(response)
rdr.next()

data = list(rdr)

if not args.all:
    data = data[:24*60]

pressure    = np.array([ float(x[0]) for x in data ])
pressure_hg = np.array([ float(x[1]) for x in data ])
tempf       = np.array([ x[2] for x in data ])
timestamp   = np.array([ x[3] for x in data ])

# timestamps stored by phant are in GMT with a particular (but oddly
# enough, not POSIX) format.  We need to convert that timestamp into
# a python datetime object, which matplotlib understands.  I'd like
# our data to be in localtime format. 

# have I mentioned that times are occasionally really annoying in 
# Python?

def ptime(x):
    return dateutil.parser.parse(x).astimezone(dateutil.tz.tzlocal())
    

t = map(lambda x : ptime(x), timestamp)

plt.figure(1)

plt.plot(t, pressure_hg, color="#C0C0C0")
plt.plot(t, savitzky_golay(pressure_hg, 121, 2), color="red", linewidth=2.0)
# WHY isn't this the default?
plt.gca().get_yaxis().get_major_formatter().set_useOffset(False)
plt.xlabel("Time")
plt.ylabel("Pressure") 

now = datetime.date.today()
plt.title("Home Weather Station Data %s" % now.strftime("%m/%d/%Y"))
plt.grid(True)

plt.gcf().autofmt_xdate()

if args.output:
    plt.savefig(args.output)
else:
    plt.show()
